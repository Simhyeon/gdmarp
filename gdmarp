#!/bin/sh

# Reference source : https://stackoverflow.com/questions/7069682/how-to-get-arguments-with-flags-in-bash

# ----------
# VARIABLES
INPUT=$PWD
OUTPUT="$PWD"/build
INCLUDE=""
PRESERVE=false
DEFAULT=true
DOCKER=false
CODE=false
GIT=false
MAKE=false
FORMAT=pptx
PACKAGE=$(basename "$0")
PACKAGE_DIR=$(dirname "$(readlink -f "$0")")
ACTION=""

# Marp path can be changed with a flat
marp=marp

# ----------
# FUNCTIONS

help_message(){
	echo "$PACKAGE - Compile markdown file into pptx file with predefined macro support."
	echo "Usage: [options] action [arguments]"
	echo " "
	echo "options:"
	echo "-h, --help            show brief help"
	echo "-I, --include=DIR     specify a m4 script directory to include"
	echo "-p, --preserve        preserve middle format"
	echo "--no-default          do not apply default macro rules"
	echo "--docker              indicate docker usage for init or compile. Docker image needs loose privilege to compile."
	echo "--git                 initiate with git after gdmarp init and create gitignore file"
	echo "--make                initiate with make file"
	echo "--pdf                 convert into pdf rather than pptx format"
	echo "--code                create tasks.json for vs code integration"
	echo " "
	echo "actions:"
	echo "init                  initiate file structure"
	echo "prep                  only pre-process m4 macros"
	echo "compile               compile markdown"
	echo "check                 check installed dependencies"
	echo "test                  create html format for testing and preserve out.md file"
	echo "install-image         install latest gdmarp docker image"
}

gd_install(){
	docker pull simoncreek/gdmarp:latest
}

gd_init(){
	touch "$INPUT"/index.md  
	mkdir "$INPUT"/res "$INPUT"/inc "$INPUT"/build
	cp "$PACKAGE_DIR"/env.m4 -f "$INPUT"/env.m4
	cp "$PACKAGE_DIR"/index.m4 -f "$INPUT"/index.m4
	cp "$PACKAGE_DIR"/default.md -f "$INPUT"/index.md
	[ "$DOCKER" = "true" ] && chmod 777 "$INPUT"/build

	[ "$GIT" = "true" ] && cd "$INPUT" && git init && printf "build\nout.md" > .gitignore
	[ "$MAKE" = "true" ] && cp "$PACKAGE_DIR"/Makefile -f "$INPUT"/Makefile
	[ "$CODE" = "true" ] && mkdir "$INPUT"/.vscode && cp "$PACKAGE_DIR"/tasks.json -f "$INPUT"/.vscode/tasks.json
}

read_config(){
	# This dot is equivalent to source but posix way
	. "$INPUT"/config
}

add_sources(){
	while test $# -gt 0; do
		case "$1" in 
			repr)
				SOURCES="${SOURCES} $MODULE/repr/macro.m4"
				shift
				;;
		esac
	done
}

gd_preprocess(){	
	# Literally read the config
	read_config

	# Export environment variable
	export ROOT=$PACKAGE_DIR
	export MODULE=$PACKAGE_DIR/modules
	export SCRIPTS=$PACKAGE_DIR/m4/scripts

	# M4 include path
	[ -z "$INCLUDE" ] && INCLUDE=$PWD

	# Source files array to process
	# Word splitting is intended because there is no array in posix sh
	SOURCES="$INPUT"/index.m4
	# If default script is enabled or not disabled
	[ "$DEFAULT" = "true" ] && SOURCES="${SOURCES} $INPUT/env.m4 $PACKAGE_DIR/m4/default.m4"
	add_sources $modules

	# Run main m4 functions
	m4 -I "$PWD" -I "$PACKAGE_DIR"/m4 -I "$PACKAGE_DIR"/m4/GNU -I "$INCLUDE" $SOURCES "$INPUT"/index.md > "$INPUT"/out.md
	# Sed for escape characters restoration
	sed -i -f "$SCRIPTS"/restore.sed "$INPUT"/out.md
}

gd_compile(){
	# Preprocessing before marp compilation
	gd_preprocess

	# Compile with marp-cli
	if [ "$DOCKER" = "false" ]; then
		# No Docker
		mkdir -p "$OUTPUT"
		$marp --allow-local-files --$FORMAT --html "$INPUT"/out.md -o "$OUTPUT"/out.$FORMAT
	else
		# With Docker
		mkdir -p "$OUTPUT"
		docker run --rm --init -v "$INPUT":/home/marp/app/ -e LANG="$LANG" marpteam/marp-cli out.md --$FORMAT --allow-local-files --html -o build/out.$FORMAT
	fi

	[ "$PRESERVE" = "false" ] && rm "$INPUT"/out.md
}

gd_test(){
	gd_preprocess

	# Compile with marp-cli
	if [ "$DOCKER" = "false" ]; then
		# No Docker
		mkdir -p "$OUTPUT"
		$marp --allow-local-files --html "$INPUT"/out.md -o "$OUTPUT"/out.html
	else
		# With Docker
		mkdir -p "$OUTPUT"
		docker run --rm --init -v "$INPUT":/home/marp/app/ -e LANG="$LANG" marpteam/marp-cli out.md --allow-local-files --html -o build/out.html
	fi
}

gd_check(){
	# Check binary installation
	# Currently m4 and awk is necessary regardless of docker image
	CLEAN=true
	echo "Checking m4 install..." && [ -z "$(command -v m4)" ] && echo "M4 not installed" && CLEAN=false
	echo "Checking awk install..." && [ -z "$(command -v awk)" ] && echo "Awk not installed" && CLEAN=false

	if [ "$DOCKER" = "false" ]; then
		echo "Checking google chrome install..." && [ -z "$(command -v google-chrome)" ] && echo "Chrome browser not installed or not found in path." \
			&& echo "Checking chromium install instead..." &&[ -z "$(command -v chromium)" ] && echo "Chromium not installed or not found in path". && CLEAN=false
		echo "Checking marp install..." && [ -z "$(command -v marp)" ] && echo "Marp cli not installed" && CLEAN=false
		[ "$CLEAN" = "true" ] && echo "Every dependencies are installed"
	else
		# Check docker installation
		# DOCKER CHECK
		echo "Checking marp-cli docker image installed"
		if [ "$(docker image ls | grep -c marpteam/marp-cli)" = "0" ]; then
			echo "ERR : Docker image is not installed"
			CLEAN=false
		fi
		[ "$CLEAN" = "true" ] && echo "Every dependencies are installed"
	fi
}

gd_main(){
	# No arg given print -h
	if [ $# -eq 0 ]; then
		help_message
		exit 0
	fi

	# Argument parse
	while test $# -gt 0; do
		case "$1" in 
			-h|--help)
				ACTION=help_message
				break
				;;
			-I)
				shift
				if test $# -gt 0; then
					export INCLUDE=$1
				fi
				;;
			--include*)
				INCLUDE=$(echo "$1" | sed -e 's/^[^=]*=//g')
				shift
				;;
			--docker)
				export DOCKER=true
				shift
				;;
			--container)
				marp="node /home/marp/.cli/marp-cli.js"
				shift
				;;
			-p|--preserve)
				PRESERVE=true
				shift
				;;
			--no-default)
				DEFAULT=false
				shift
				;;
			--git)
				GIT=true
				shift
				;;
			--make)
				MAKE=true
				shift
				;;
			--code)
				CODE=true
				shift
				;;
			--pdf)
				FORMAT=pdf
				shift
				;;
			init)
				ACTION=gd_init
				shift
				;;
			compile)
				ACTION=gd_compile
				shift
				;;
			install-image)
				ACTION=gd_install
				shift
				;;
			prep)
				ACTION=gd_preprocess
				shift
				;;
			test)
				ACTION=gd_test
				shift
				;;
			check)
				ACTION=gd_check
				shift
				;;
			*)
				break
				;;
		esac
	done
	$ACTION
	exit 0
}

# ----------
# MAIN
gd_main "$*"
