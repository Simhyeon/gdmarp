#!/bin/sh

# Reference source : https://stackoverflow.com/questions/7069682/how-to-get-arguments-with-flags-in-bash

init_var(){
	cwd=$PWD
	out_dir="$PWD"/build
	out_name="out"
	include=""
	sources=""
	flag_preserve=false
	flag_use_default=true
	flag_use_docker=false
	flag_init_code=false
	flag_init_git=false
	flag_init_make=false
	flag_format=pptx
	flag_modules=""
	flag_input_file="index.gdt"
	flag_retain_unused=false
	only_prep=false
	config=""
	bin_name=$(basename "$0")
	bin_path=$(dirname "$(readlink -f "$0")")
	action=""

	# This is rather temporary for convenience
	out_file="$out_dir"/out.gdt
	frag_file="$out_dir"/frag.gdt
}

# Marp path can be changed with a flat
marp=marp

# ----------
# FUNCTIONS

help_message(){
	echo "$bin_name - Compile markdown file into pptx file with predefined macro support."
	echo "Usage: [options] action [arguments]"
	echo " "
	echo "options:"
	echo "-F <repr format>      repr a format to render"
	echo "-N <file name>        designate a file name for input"
	echo "-I <dir>              specify a m4 script directory to include"
	echo "-M <module>           a module to include with execution"
	echo "-O <file name>        designate a file name for final result"
	echo "-S <type>             add a file type to include for initiation"
	echo "-d                    indicate a docker usage. Docker image needs a loose privilege."
	echo "-g                    initiate with git after gdmarp init and create a gitignore file"
	echo "-h                    show brief help"
	echo "-n                    do not apply default macro rules"
	echo "-p                    preserve a middle format"
	echo "-r                    retain unusesd macro usages if not given a flag, all unused macros are discarded"
	echo " "
	echo "actions:"
	echo "check                 check installed dependencies"
	echo "help                  show brief help messages"
	echo "init                  construct a default file structure"
	echo "install-image         install a latest gdmarp docker image"
	echo "prep                  only pre-process m4 macros"
	echo "repr                  render a representation form"
	echo "run                   run all scripts configured in config.json file"
	echo "test                  run all test scripts configued in config.json file, test automatcially enables preserve flag and don't overwrite middle file"
	echo "wiki                  push the processed file into the given wiki website"
	echo "wui                   create a web ui html"
}

gd_install(){
	docker pull simoncreek/gdmarp:latest
}

gd_init(){
	cp "$bin_path"/default/basic/* -rf "$cwd"

	[ "$flag_use_docker" = "true" ] && chmod 777 "$cwd"/build
	[ "$flag_init_git" = "true" ] && cd "$cwd" && git init && printf "build" > .gitignore
	[ "$flag_init_make" = "true" ] && cp "$bin_path"/default/extra/Makefile -f "$cwd"/Makefile
	[ "$flag_init_code" = "true" ] && mkdir "$cwd"/.vscode && cp "$bin_path"/default/extra/tasks.json -f "$cwd"/.vscode/tasks.json

	# TODO | Currently flag_modules are a single item despite the name
	case $flag_modules in
		mw)
			readconfig

			config=$(printf '%s' "$config" | jq --arg bot_id id --arg bot_pwd password --arg page_title title '.env += {url: "wiki_url"} + {bot_id: $bot_id} + {bot_pwd: $bot_pwd } + {page_title: $page_title}')
			printf '%s' "$config" > "$cwd"/config.json
			;;
	esac
}

readconfig(){
	config=$(cat "$cwd"/config.json)
}

# Yet to complete
add_sources(){
	while test $# -gt 0; do
		case "$1" in 
			marp)
				sources="${sources} $MODULE/repr/marp/env.m4 $MODULE/repr/marp/macro.m4"
				shift
				;;
			mw)
				sources="${sources} $MODULE/wiki/mediawiki/env.m4 $MODULE/wiki/mediawiki/macro.m4"
				shift
				;;
			bts)
				sources="${sources} $MODULE/webui/bts/env.m4 $MODULE/webui/bts/macro.m4"
				shift
				;;
			*)
				shift
				;;
		esac
	done
}

gd_preprocess(){
	# Literally read the config
	readconfig

	# Create build directory if not existent
	mkdir -p "$out_dir"

	# Export environment variable
	export ROOT=$bin_path
	export MODULE=$bin_path/modules
	export SCRIPTS=$bin_path/m4/scripts

	# M4 include path
	# If -I flag option was not given set current working directory as include directory
	[ -z "$include" ] && include=$cwd

	# Construct source files to process
	# Word splitting for sources varaible is intended because there is no array in posix sh
	sources="$cwd"/index.m4
	# If default script is enabled(default) include it
	[ "$flag_use_default" = "true" ] && sources="${sources} $cwd/env.m4 $bin_path/m4/default.m4"
	# Add sources according to given modules
	add_sources $flag_modules

	# Run main m4 functions $sources should be expanded
	m4 -I "$cwd" -I "$bin_path"/m4 -I "$bin_path"/m4/GNU -I "$include" $sources "$cwd"/"$flag_input_file" > "$out_file"

	# Process again for fragmented macro execution no sources needed
	m4 -I "$cwd" -I "$bin_path"/m4 -I "$bin_path"/m4/GNU -I "$include" $sources "$out_file" > "$frag_file"

	# First sed removes all contents inside brackets including nested brackets
	# Second sed removes all macro names start with underscore which is convention of end user macros
	# These sed scripts are scraped from internet, and it happends to doesn't work in conjunction thus, separate command usage is needed.
	[ "$flag_retain_unused" = "false" ] && sed -i ':again;$!N;$!b again; :b; s/([^()]*)//g; t b' "$frag_file" && sed -i 's/\<_[^ ]*\>//' "$frag_file"

	# This squahses multiple new lines into single new line
	awk '/./ { e=0 } /^$/ { e += 1 } e <= 1' < "$frag_file" > "$out_file"

	# Sed for escape characters restoration
	sed -i -f "$SCRIPTS"/restore.sed "$out_file"

	# If this is prep subcommand then set file's name to given name
	[ "$only_prep" = "true" ] && [ "$out_name" != "out" ] && mv "$out_file" -f "$out_dir"/$out_name.gdt

	# Remove frag file because it is not used anymore
	[ "$flag_preserve" = "false" ] && rm "$frag_file"
}

gd_repr(){
	# Preprocessing before marp compilation
	gd_preprocess

	# Change out.gdt to out.md because marp expects markdown file
	mv "$out_file" "$out_dir"/out.md

	# Compile with marp-cli
	if [ "$flag_use_docker" = "false" ]; then
		# No Docker
		$marp --allow-local-files --$flag_format --html "$out_dir"/out.md -o "$out_dir"/$out_name.$flag_format
	else
		# With Docker
		docker run --rm --init -v "$cwd":/home/marp/app/ -e LANG="$LANG" marpteam/marp-cli "$out_dir"/out.md --$flag_format --allow-local-files --html -o "$out_dir"/$out_name.$flag_format
	fi

	if [ "$flag_preserve" = "false" ]; then
		rm "$out_dir"/out.md
	else
		# For test subcommand compatibility
		mv "$out_dir"/out.md "$out_file"
	fi
}

gd_wiki(){
	# Preprocessing before sending out file
	gd_preprocess

	# No Docker code only for now

	# Utilzie various backends
	case $flag_modules in
		mw)
			# TODO Rename this variables into screaming snake case
			# Export environment variables
			export bot_id=$(printf '%s' "$config" | jq .env.bot_id)
			export bot_pwd=$(printf '%s' "$config" | jq .env.bot_pwd)
			export page_title=$(printf '%s' "$config" | jq .env.page_title)

			# Return early if variable is null
			[ "$bot_id" = "null" ] && echo "Config's env is missing bot_id" && exit 1
			[ "$bot_pwd" = "null" ] && echo "Config's env is missing bot_pwd" && exit 1
			[ "$page_title" = "null" ] && echo "Config's env is missing page_title" && exit 1

			# TODO | Currently binary query is not complete
			node "$bin_path"/modules/wiki/mediawiki/mediawiki_bin/index.js "$out_file" "$cwd"/config.json

			# Change name to given final name and save to 
			mv "$out_file" -f "$out_dir"/$out_name.wikitext
			;;
		*)
			echo "No proper module was given to render a wiki page"
			exit 1
			;;
	esac

	# Previously it simply removed out.gdt file however I became so sure if is a
	# sane to remove file while it is not a middle file but final result
	#[ "$flag_preserve" = "false" ] && rm "$out_file"
}

gd_wui(){
	# Preprocessing before sending out file
	gd_preprocess

	# No Docker code only for now

	# Utilzie various backends
	case $flag_modules in
		bts)
			# Add divert directives in first line and last line of the file
			# so that all texts within out.gdt will be ignored in final html file
			sed -i -e '1 i\divert(`-1\x27)' -e '$a\divert`\x27' "$out_file"

			# Process macros, kind of template engine
			m4 -I "$bin_path"/m4/GNU -I "$MODULE"/webui/bts/template \
			-I "$cwd" \
			"$MODULE"/webui/bts/env.m4 "$cwd"/env.m4 \
			"$bin_path"/m4/default.m4 "$out_file" \
			"$MODULE"/webui/bts/template/main.html | awk -f \
			"$SCRIPTS"/rmExtNewLines.awk > "$out_dir"/"$out_name".html

			# Remove middle file
			[ "$flag_preserve" = "false" ] && rm "$out_file"
			;;
		*)
			echo "No proper module was given to yield a web ui page"
			exit 1
			;;
	esac
}

gd_run(){
	# Read a config
	readconfig

	# Index
	i=0
	runner=$(echo "$config" | jq .script[$i] )
	while [ "$runner" != "null" ]
	do
		printf '> Executing script %s\n' "$runner"

		# cut off comma from the runner
		runner=$(echo $runner | tr -d '"')
		subcommand=$(echo $runner | awk '{print $1}')

		# Run or test cannot be nested to prevent infinite loop
		if [ "$subcommand" = "test" ] || [ "$subcommand" = "run" ]; then
			echo "Test or run subcommand cannot be nested"
			exit 1
		fi

		# Reset varaibles for fresh run
		init_var
		# !! Do not quote the argument because gd_main expects non quoted arguments
		gd_main $runner
		i=$((i+1))
		runner=$(echo "$config" | jq .script[$i] )
	done
	echo "> Run finished"
}

gd_test(){
	# Read a config
	readconfig

	# Index
	i=0
	runner=$(echo "$config" | jq .test[$i] )
	while [ "$runner" != "null" ]
	do
		printf '> Executing test %s\n' "$runner"
		# Reset varaibles for fresh run
		init_var

		# cut off comma from the runner
		runner=$(echo $runner | tr -d '"')
		subcommand=$(echo $runner | awk '{print $1}')

		# Run or test cannot be nested to prevent infinite loop
		if [ "$subcommand" = "test" ] || [ "$subcommand" = "run" ]; then
			echo "Test or run subcommand cannot be nested"
			exit 1
		fi

		# Also attach module name if module name was given in test script
		module_name=$(echo $runner | awk '{for (I=1;I<NF;I++) if ($I == "-M") print $(I+1)}')
		[ "$module_name" != "" ] && module_name=_"$module_name"

		# Set a test middle file's name differnt from a normal middle file
		out_file="$out_dir"/test_$(echo $runner | awk '{print $1}')"$module_name"_out_"$i".gdt
		frag_file="$out_dir"/test_$(echo $runner | awk '{print $1}')"$module_name"_frag_"$i".gdt

		# Always turn on preserve to preserve all miscellaenous files
		flag_preserve=true

		# !! Do not quote the argument because gd_main expects non quoted arguments
		gd_main $runner
		i=$((i+1))
		runner=$(echo "$config" | jq .test[$i] )
	done
	echo "> test finished"
}

# This function is somewhat incomplete and rather useless
gd_check(){
	# Check binary installation
	# Currently m4 and awk is necessary regardless of docker image
	CLEAN=true
	echo "Checking m4 install..." && [ -z "$(command -v m4)" ] && echo "M4 not installed" && CLEAN=false
	echo "Checking awk install..." && [ -z "$(command -v awk)" ] && echo "Awk not installed" && CLEAN=false

	if [ "$flag_use_docker" = "false" ]; then
		echo "Checking google chrome install..." && [ -z "$(command -v google-chrome)" ] && echo "Chrome browser not installed or not found in path." \
			&& echo "Checking chromium install instead..." &&[ -z "$(command -v chromium)" ] && echo "Chromium not installed or not found in path". && CLEAN=false
		echo "Checking marp install..." && [ -z "$(command -v marp)" ] && echo "Marp cli not installed" && CLEAN=false
		[ "$CLEAN" = "true" ] && echo "Every dependencies are installed"
	else
		# Check docker installation
		# flag_use_docker CHECK
		echo "Checking marp-cli docker image installed"
		if [ "$(docker image ls | grep -c marpteam/marp-cli)" = "0" ]; then
			echo "ERR : Docker image is not installed"
			CLEAN=false
		fi
		[ "$CLEAN" = "true" ] && echo "Every dependencies are installed"
	fi
}

gd_main(){
	# No arg given print -h
	if [ $# -eq 0 ]; then
		help_message
		exit 0
	fi

	# Argument parse
	while [ $# -gt 0 ] ; do
		case "$1" in 
			-h) # help
				action=help_message
				break
				;;
			-I) # Include
				if [ -n "$2" ]; then
					while [ -n "$2" ]; do
						case "$2" in
							# Next element is another flag
							-*)
								break
								;;
							*)
								include="${include} $2"
								shift
								;;
						esac
					done
					shift 
				else
					printf 'ERROR: "-I" requires a non-empty option argument.\n' >&2
					exit 1
				fi
				;;
			-N) # iNput file
				if [ -n "$2" ]; then
					while [ -n "$2" ]; do
						case "$2" in
							-*)
								break
								;;
							*)
								flag_input_file=$2
								shift
								;;
						esac
					done
					shift 
				else
					printf 'ERROR: "-N" requires a non-empty option argument.\n' >&2
					exit 1
				fi
				;;
			-d) # docker
				flag_use_docker=true
				shift
				;;
			-r) # retain
				flag_retain_unused=true
				shift
				;;
			-p) # preserve
				flag_preserve=true
				shift
				;;
			-n) # no default, negate or I don't any negatation word
				flag_use_default=false
				shift
				;;
			-g) # git
				flag_init_git=true
				shift
				;;
			-M) # Module
				if [ -n "$2" ]; then
					flag_modules=$2
					shift
				else
					printf 'ERROR: "-M" requires a non-empty option argument.\n' >&2
					exit 1
				fi
				shift
				;;
			-O) # Output
				if [ -n "$2" ]; then
					out_name=$2
					shift
				else
					printf 'ERROR: "-O" requires a non-empty option argument.\n' >&2
					exit 1
				fi
				shift
				;;
			-S) # Script
				if [ -n "$2" ]; then
					case "$2" in
						"make")
							flag_init_make=true
							;;
						"code")
							flag_init_code=true
							;;
					esac
					shift
				else
					printf 'ERROR: "-S" requires a non-empty option argument.\n' >&2
					exit 1
				fi
				shift
				;;
			-F) # Format
				if [ -n "$2" ]; then
					case "$2" in
						"pdf")
							flag_format=pdf
							;;
						"pptx")
							flag_format=pptx
							;;
						"html")
							flag_format=html
							;;
						*)
							echo "\"$2\" is not a supported format"
							;;
					esac
					shift
				else
					printf 'ERROR: "-F" requires a non-empty option argument.\n' >&2
					exit 1
				fi
				shift
				;;
			help)
				action=help_message
				break
				;;
			init)
				action=gd_init
				shift
				;;
			repr) # representation
				action=gd_repr
				shift
				;;
			wiki)
				action=gd_wiki
				shift
				;;
			wui) # web ui
				action=gd_wui
				# This is necessary because wui expands m4 for triple times
				flag_retain_unused=true
				shift
				;;
			run)
				action=gd_run
				shift
				;;
			install-image)
				action=gd_install
				shift
				;;
			prep)
				action=gd_preprocess
				only_prep=true
				shift
				;;
			test)
				action=gd_test
				flag_modules=marp
				flag_format=html
				shift
				;;
			check)
				action=gd_check
				shift
				;;
			*)
				shift
				;;
		esac
	done
	$action
	#exit 0
}

# ----------
# MAIN
# Initiate variables
init_var
# No quote is needed because argument should be expanded
gd_main $*
