#!/bin/sh

# Reference source : https://stackoverflow.com/questions/7069682/how-to-get-arguments-with-flags-in-bash

# ----------
# VARIABLES
INPUT=$PWD
OUTPUT="$PWD"/build
INCLUDE=""
PRESERVE=false
DEFAULT=true
DOCKER=false
CODE=false
GIT=false
MAKE=false
FORMAT=pptx
WITHMODS=""
CONFIG=""
PACKAGE=$(basename "$0")
PACKAGE_DIR=$(dirname "$(readlink -f "$0")")
ACTION=""

# Marp path can be changed with a flat
marp=marp

# ----------
# FUNCTIONS

help_message(){
	echo "$PACKAGE - Compile markdown file into pptx file with predefined macro support."
	echo "Usage: [options] action [arguments]"
	echo " "
	echo "options:"
	echo "-h                    show brief help"
	echo "-I <DIR>              specify a m4 script directory to include"
	echo "-M <MODULES>          modules to include with execution"
	echo "-p                    preserve middle format"
	echo "-n                    do not apply default macro rules"
	echo "-d                    indicate docker usage. Docker image needs loose privilege."
	echo "-g                    initiate with git after gdmarp init and create gitignore file"
	echo "-S <TYPE>             add automation script"
	echo "-F <FORMAT>           repr format to render"
	echo " "
	echo "actions:"
	echo "init                  initiate file structure"
	echo "prep                  only pre-process m4 macros"
	echo "repr                  render representation form"
	echo "wiki                  Push processed file into wiki website"
	echo "script                (TODO) Run all scripts configured in config.json file"
	echo "check                 check installed dependencies"
	echo "test                  create html format for testing and preserve out.md file"
	echo "install-image         install latest gdmarp docker image"
}

gd_install(){
	docker pull simoncreek/gdmarp:latest
}

gd_init(){
	cp "$PACKAGE_DIR"/default/basic/* -rf "$INPUT"

	[ "$DOCKER" = "true" ] && chmod 777 "$INPUT"/build
	[ "$GIT" = "true" ] && cd "$INPUT" && git init && printf "build\nout.md" > .gitignore
	[ "$MAKE" = "true" ] && cp "$PACKAGE_DIR"/default/extra/Makefile -f "$INPUT"/Makefile
	[ "$CODE" = "true" ] && mkdir "$INPUT"/.vscode && cp "$PACKAGE_DIR"/default/extra/tasks.json -f "$INPUT"/.vscode/tasks.json

	# TODO | Currently withmods are a single item despite the name
	case $WITHMODS in
		mw)
			read_config

			CONFIG=$(printf '%s' "$CONFIG" | jq --arg bot_id id --arg bot_pwd password --arg page_title title '.env += {url: "wiki_url"} + {bot_id: $bot_id} + {bot_pwd: $bot_pwd } + {page_title: $page_title}')
			printf '%s' "$CONFIG" > "$INPUT"/config.json
			;;
	esac
}

read_config(){
	CONFIG=$(cat "$INPUT"/config.json)
}

# Yet to complete
add_sources(){
	while test $# -gt 0; do
		case "$1" in 
			repr)
				SOURCES="${SOURCES} $MODULE/repr/env.m4 $MODULE/repr/macro.m4"
				shift
				;;
			mw)
				SOURCES="${SOURCES} $MODULE/wiki/mediawiki/env.m4 $MODULE/wiki/mediawiki/macro.m4"
				shift
				;;
			*)
				shift
				;;
		esac
	done
}

gd_preprocess(){
	# Literally read the config
	read_config

	# Export environment variable
	export ROOT=$PACKAGE_DIR
	export MODULE=$PACKAGE_DIR/modules
	export SCRIPTS=$PACKAGE_DIR/m4/scripts

	# M4 include path
	[ -z "$INCLUDE" ] && INCLUDE=$PWD

	# Source files array to process
	# Word splitting is intended because there is no array in posix sh
	SOURCES="$INPUT"/index.m4
	# If default script is enabled or not disabled
	[ "$DEFAULT" = "true" ] && SOURCES="${SOURCES} $INPUT/env.m4 $PACKAGE_DIR/m4/default.m4"
	# modules are references from flag option
	add_sources $WITHMODS

	# Run main m4 functions
	m4 -I "$PWD" -I "$PACKAGE_DIR"/m4 -I "$PACKAGE_DIR"/m4/GNU -I "$INCLUDE" $SOURCES "$INPUT"/index.md > "$INPUT"/out.md

	# Process again for fragmented macro execution no sources needed
	m4 -I "$PWD" -I "$PACKAGE_DIR"/m4 -I "$PACKAGE_DIR"/m4/GNU -I "$INCLUDE" $SOURCES "$INPUT"/out.md > "$INPUT"/frag.md
	# This squahses multiple new lines into single new line
	awk '/./ { e=0 } /^$/ { e += 1 } e <= 1' < "$INPUT"/frag.md > "$INPUT"/out.md
	rm "$INPUT"/frag.md

	# Sed for escape characters restoration
	sed -i -f "$SCRIPTS"/restore.sed "$INPUT"/out.md
}

gd_repr(){
	# Preprocessing before marp compilation
	gd_preprocess

	# Compile with marp-cli
	if [ "$DOCKER" = "false" ]; then
		# No Docker
		mkdir -p "$OUTPUT"
		$marp --allow-local-files --$FORMAT --html "$INPUT"/out.md -o "$OUTPUT"/out.$FORMAT
	else
		# With Docker
		mkdir -p "$OUTPUT"
		docker run --rm --init -v "$INPUT":/home/marp/app/ -e LANG="$LANG" marpteam/marp-cli out.md --$FORMAT --allow-local-files --html -o build/out.$FORMAT
	fi

	[ "$PRESERVE" = "false" ] && rm "$INPUT"/out.md
}

gd_wiki(){
	# Preprocessing before sending out file
	gd_preprocess

	# No Docker code only for now
	# Make directory if not existant
	mkdir -p "$OUTPUT"

	# Utilzie various backends
	case $WITHMODS in
		mw)
			# Export environment variables
			export bot_id=$(printf '%s' "$CONFIG" | jq .env.bot_id)
			export bot_pwd=$(printf '%s' "$CONFIG" | jq .env.bot_pwd)
			export page_title=$(printf '%s' "$CONFIG" | jq .env.page_title)

			# Return early if variable is null
			[ "$bot_id" = "null" ] && echo "Config's env is missing bot_id" && exit 0
			[ "$bot_pwd" = "null" ] && echo "Config's env is missing bot_pwd" && exit 0
			[ "$page_title" = "null" ] && echo "Config's env is missing page_title" && exit 0

			# TODO | Currently binary query is not complete
			node "$PACKAGE_DIR"/modules/wiki/mediawiki/mediawiki_bin/index.js "$INPUT"/out.md "$INPUT"/config.json
			;;
		*)
			echo "No proper module was given to render a wiki page"
			exit 0
			;;
	esac

	[ "$PRESERVE" = "false" ] && rm "$INPUT"/out.md
}

# TODO 
gd_script(){
	echo "DUMMY"
}

gd_test(){
	gd_preprocess

	# Compile with marp-cli
	if [ "$DOCKER" = "false" ]; then
		# No Docker
		mkdir -p "$OUTPUT"
		$marp --allow-local-files --html "$INPUT"/out.md -o "$OUTPUT"/out.html
	else
		# With Docker
		mkdir -p "$OUTPUT"
		docker run --rm --init -v "$INPUT":/home/marp/app/ -e LANG="$LANG" marpteam/marp-cli out.md --allow-local-files --html -o build/out.html
	fi
}

gd_check(){
	# Check binary installation
	# Currently m4 and awk is necessary regardless of docker image
	CLEAN=true
	echo "Checking m4 install..." && [ -z "$(command -v m4)" ] && echo "M4 not installed" && CLEAN=false
	echo "Checking awk install..." && [ -z "$(command -v awk)" ] && echo "Awk not installed" && CLEAN=false

	if [ "$DOCKER" = "false" ]; then
		echo "Checking google chrome install..." && [ -z "$(command -v google-chrome)" ] && echo "Chrome browser not installed or not found in path." \
			&& echo "Checking chromium install instead..." &&[ -z "$(command -v chromium)" ] && echo "Chromium not installed or not found in path". && CLEAN=false
		echo "Checking marp install..." && [ -z "$(command -v marp)" ] && echo "Marp cli not installed" && CLEAN=false
		[ "$CLEAN" = "true" ] && echo "Every dependencies are installed"
	else
		# Check docker installation
		# DOCKER CHECK
		echo "Checking marp-cli docker image installed"
		if [ "$(docker image ls | grep -c marpteam/marp-cli)" = "0" ]; then
			echo "ERR : Docker image is not installed"
			CLEAN=false
		fi
		[ "$CLEAN" = "true" ] && echo "Every dependencies are installed"
	fi
}

gd_main(){
	# No arg given print -h
	if [ $# -eq 0 ]; then
		help_message
		exit 0
	fi

	# Argument parse
	while [ $# -gt 0 ] ; do
		case "$1" in 
			-h|--help)
				ACTION=help_message
				break
				;;
			-I)
				if [ -n "$2" ]; then
					while [ -n "$2" ]; do
						case "$2" in
							# Next element is another flag
							-*)
								break
								;;
							*)
								INCLUDE="${INCLUDE} $2"
								shift
								;;
						esac
					done
					shift 
				else
					printf 'ERROR: "-I" requires a non-empty option argument.\n' >&2
					exit 1
				fi
				;;
			-d)
				export DOCKER=true
				shift
				;;
			-c)
				marp="node /home/marp/.cli/marp-cli.js"
				shift
				;;
			-p)
				PRESERVE=true
				shift
				;;
			-n)
				DEFAULT=false
				shift
				;;
			-g)
				GIT=true
				shift
				;;
			-M)
				if [ -n "$2" ]; then
					WITHMODS=$2
					shift
				else
					printf 'ERROR: "-M" requires a non-empty option argument.\n' >&2
					exit 1
				fi
				shift
				;;
			-S)
				if [ -n "$2" ]; then
					case "$2" in
						"make")
							MAKE=true
							;;
						"code")
							CODE=true
							;;
					esac
					shift
				else
					printf 'ERROR: "-S" requires a non-empty option argument.\n' >&2
					exit 1
				fi
				shift
				;;
			-F)
				if [ -n "$2" ]; then
					case "$2" in
						"pdf")
							FORMAT=pdf
							;;
						"pptx")
							FORMAT=pptx
							;;
					esac
					shift
				else
					printf 'ERROR: "-F" requires a non-empty option argument.\n' >&2
					exit 1
				fi
				shift
				;;
			init)
				ACTION=gd_init
				shift
				;;
			repr)
				ACTION=gd_repr
				shift
				;;
			wiki)
				ACTION=gd_wiki
				shift
				;;
			script)
				ACtION=gd_script
				shift
				;;
			install-image)
				ACTION=gd_install
				shift
				;;
			prep)
				ACTION=gd_preprocess
				shift
				;;
			test)
				ACTION=gd_test
				shift
				;;
			check)
				ACTION=gd_check
				shift
				;;
			*)
				shift
				;;
		esac
	done
	$ACTION
	exit 0
}

# ----------
# MAIN
# No quote is needed
gd_main $*
