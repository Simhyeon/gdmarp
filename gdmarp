#!/bin/bash

# Reference source : https://stackoverflow.com/questions/7069682/how-to-get-arguments-with-flags-in-bash

# ----------
# VARIABLES
INPUT=$PWD
OUTPUT=$PWD/build
INCLUDE=""
PRESERVE=false
DEFAULT=true
DOCKER=false
CODE=false
GIT=false
MAKE=false
FORMAT=pptx
PACKAGE=$(basename $BASH_SOURCE)
PACKAGE_DIR=$(dirname $(readlink -f "$0"))
ACTION=""

# ----------
# FUNCTIONS

function gd_help(){
	echo "$PACKAGE - Compile markdown file into pptx file with predefined macro support."
	echo "Usage: [options] action [arguments]"
	echo " "
	echo "options:"
	echo "-h, --help            show brief help"
	echo "-I, --include=DIR     specify a m4 script directory to include"
	echo "-p, --preserve        preserve middle format"
	echo "--no-default          do not apply default macro rules"
	echo "--docker              indicate docker usage for init or compile. Docker image needs loose privilege to compile."
	echo "--git                 initiate with git after gdmarp init and create gitignore file"
	echo "--make                initiate with make file"
	echo "--pdf                 convert into pdf rather than pptx format"
	echo "--code                create tasks.json for vs code integration"
	echo " "
	echo "actions:"
	echo "init                  initiate file structure"
	echo "prep                  only pre-process m4 macros"
	echo "compile               compile markdown"
	echo "check                 check installed dependencies"
	echo "test                  create html format for testing and preserve out.md file"
	echo "update                update css and m4 extension scripts"
}

function gd_init(){
	touch $INPUT/index.md  
	mkdir $INPUT/res $INPUT/inc $INPUT/build $INPUT/css $INPUT/m4_ext
	cp $PACKAGE_DIR/env.m4 -f $INPUT/env.m4
	cp $PACKAGE_DIR/index.m4 -f $INPUT/index.m4
	cp $PACKAGE_DIR/default.md -f $INPUT/index.md
	cp $PACKAGE_DIR/css/*.css -f $INPUT/css
	cp $PACKAGE_DIR/m4_ext/* -f $INPUT/m4_ext
	[ "$DOCKER" = "true" ] && chmod 777 $INPUT/build

	[ "$GIT" = "true" ] && cd $INPUT && git init && printf "build\nout.md" > .gitignore
	[ "$MAKE" = "true" ] && cp $PACKAGE_DIR/Makefile -f $INPUT/Makefile
	[ "$CODE" = "true" ] && mkdir $INPUT/.vscode && cp $PACKAGE_DIR/tasks.json -f $INPUT/.vscode/tasks.json
}

function gd_update(){
	cp $PACKAGE_DIR/css/*.css -f $INPUT/css
	cp $PACKAGE_DIR/m4_ext/* -f $INPUT/m4_ext
}

function gd_preprocess(){	
	echo "Input directory is : "
	echo $INPUT
	echo "Output directory is :"
	echo $OUTPUT
	echo "pwd value is "
	echo $PWD
	echo "Package path"
	echo $PACKAGE
	echo "Package dir"
	echo $PACKAGE_DIR
	exit 0 
	# M4 include path
	[[ -z "$INCLUDE" ]] && INCLUDE=$PWD
	# Scripts array to process
	SCRIPTS=($INPUT/index.m4)
	# If default script is enabled or not disabled
	[[ "$DEFAULT" = "true" ]] && SCRIPTS+=($INPUT/env.m4 $PACKAGE_DIR/m4/default.m4)
	# Run main m4 functions
	m4 -I $PWD -I $PACKAGE_DIR/m4 -I $PACKAGE_DIR/m4/GNU -I $INCLUDE "${SCRIPTS[@]}" $INPUT/index.md > $INPUT/out.md
	# Sed for escape characters restoration
	sed -i -f $INPUT/m4_ext/restore.sed $INPUT/out.md
}

function gd_compile(){
	# Preprocessing before marp compilation
	gd_preprocess

	# Compile with marp-cli
	if [ "$DOCKER" = "false" ]; then
		# No Docker
		mkdir -p $OUTPUT
		marp --allow-local-files --$FORMAT --html $INPUT/out.md -o $OUTPUT/out.$FORMAT
	else
		# With Docker
		mkdir -p $OUTPUT
		docker run --rm --init -v $INPUT:/home/marp/app/ -e LANG=$LANG marpteam/marp-cli out.md --$FORMAT --allow-local-files --html -o build/out.$FORMAT
	fi
	[ "$PRESERVE" = "false" ] && rm $INPUT/out.md
}

function gd_test(){
	gd_preprocess

	# Compile with marp-cli
	if [ "$DOCKER" = "false" ]; then
		# No Docker
		mkdir -p $OUTPUT
		marp --allow-local-files --html $INPUT/out.md -o $OUTPUT/out.html
	else
		# With Docker
		mkdir -p $OUTPUT
		docker run --rm --init -v $INPUT:/home/marp/app/ -e LANG=$LANG marpteam/marp-cli out.md --allow-local-files --html -o build/out.html
	fi
}

function gd_check(){
	# Check binary installation
	# Currently m4 and awk is necessary regardless of docker image
	CLEAN=true
	echo "Checking m4 install..." && [ -z $(command -v m4) ] && echo "M4 not installed" && CLEAN=false
	echo "Checking awk install..." && [ -z $(command -v awk) ] && echo "Awk not installed" && CLEAN=false

	if [ "$DOCKER" = "false" ]; then
		echo "Checking google chrome install..." && [ -z $(command -v google-chrome) ] && echo "Chrome browser not installed or not found in path." \
			&& echo "Checking chromium install instead..." &&[ -z $(command -v chromium) ] && echo "Chromium not installed or not found in path". && CLEAN=false
		echo "Checking marp install..." && [ -z $(command -v marp) ] && echo "Marp cli not installed" && CLEAN=false
		[ "$CLEAN" == "true" ] && echo "Every dependencies are installed"
	else
		# Check docker installation
		# DOCKER CHECK
		echo "Checking marp-cli docker image installed"
		if [ "$(docker image ls | grep -c marpteam/marp-cli)" = "0" ]; then
			echo "ERR : Docker image is not installed"
			CLEAN=false
		fi
		[ "$CLEAN" == "true" ] && echo "Every dependencies are installed"
	fi
}

function gd_main(){
	# No arg given print -h
	if [ $# -eq 0 ]; then
		gd_help
		exit 0
	fi

	# Argument parse
	while test $# -gt 0; do
		case "$1" in 
			-h|--help)
				ACTION=gd_help
				break
				;;
			-I)
				shift
				if test $# -gt 0; then
					export INCLUDE=$1
				fi
				;;
			--include*)
				export INCLUDE=`echo $1 | sed -e 's/^[^=]*=//g'`
				shift
				;;
			--docker)
				export DOCKER=true
				shift
				;;
			-p|--preserve)
				PRESERVE=true
				shift
				;;
			--no-default)
				DEFAULT=false
				shift
				;;
			--git)
				GIT=true
				shift
				;;
			--make)
				MAKE=true
				shift
				;;
			--code)
				CODE=true
				shift
				;;
			--pdf)
				FORMAT=pdf
				shift
				;;
			init)
				ACTION=gd_init
				shift
				;;
			compile)
				ACTION=gd_compile
				shift
				;;
			prep)
				ACTION=gd_preprocess
				shift
				;;
			test)
				ACTION=gd_test
				shift
				;;
			check)
				ACTION=gd_check
				shift
				;;
			update)
				ACTION=gd_update
				shift
				;;
			*)
				break
				;;
		esac
	done
	$ACTION
	exit 0
}

# ----------
# MAIN
gd_main $*
